{"ast":null,"code":"import { fetchConToken } from \"../../helpers/fetch\";\nimport { types } from \"../types/types\";\nexport const eventStartAddNew = event => {\n  return async (dispatch, getState) => {\n    const {\n      uid,\n      name\n    } = getState().auth;\n\n    try {\n      const resp = await fetchConToken('events', event, 'POST');\n      const body = await resp.json();\n\n      if (body.ok) {\n        event.id = body.evento.id;\n        event.user = {\n          _id: uid,\n          name: name\n        };\n        dispatch(eventAddNew(event));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventAddNew = event => ({\n  type: types.eventAddNew,\n  payload: event\n});\n\nexport const eventSetActive = event => ({\n  type: types.eventSetActive,\n  payload: event\n});\nexport const eventClearActiveEvent = () => ({\n  type: types.eventClearActiveEvent\n});\nexport const eventUpdated = event => ({\n  type: types.eventUpdated,\n  payload: event\n});\nexport const eventDeleted = () => ({\n  type: types.eventDeleted\n});\nexport const eventStartLoading = () => {\n  return async dispatch => {\n    try {\n      const resp = await fetchConToken('events');\n      const body = await resp.json();\n      const events = body.events;\n      dispatch(eventLoaded(events));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventLoaded = events => ({\n  type: types.eventLoaded,\n  payload: events\n});","map":{"version":3,"sources":["/Users/julianestefan/Documents/Vero/09-calendar-app/calendar-app/src/components/actions/events.js"],"names":["fetchConToken","types","eventStartAddNew","event","dispatch","getState","uid","name","auth","resp","body","json","ok","id","evento","user","_id","eventAddNew","error","console","log","type","payload","eventSetActive","eventClearActiveEvent","eventUpdated","eventDeleted","eventStartLoading","events","eventLoaded"],"mappings":"AAAA,SAASA,aAAT,QAA8B,qBAA9B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAGA,OAAO,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AACvC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAEjC,UAAM;AAACC,MAAAA,GAAD;AAAMC,MAAAA;AAAN,QAAcF,QAAQ,GAAGG,IAA/B;;AAEA,QAAI;AACA,YAAMC,IAAI,GAAE,MAAMT,aAAa,CAAE,QAAF,EAAYG,KAAZ,EAAmB,MAAnB,CAA/B;AACA,YAAMO,IAAI,GAAE,MAAMD,IAAI,CAACE,IAAL,EAAlB;;AAEA,UAAKD,IAAI,CAACE,EAAV,EAAc;AACVT,QAAAA,KAAK,CAACU,EAAN,GAAWH,IAAI,CAACI,MAAL,CAAYD,EAAvB;AACAV,QAAAA,KAAK,CAACY,IAAN,GAAa;AACTC,UAAAA,GAAG,EAAEV,GADI;AAETC,UAAAA,IAAI,EAAEA;AAFG,SAAb;AAIAH,QAAAA,QAAQ,CAACa,WAAW,CAACd,KAAD,CAAZ,CAAR;AACH;AACJ,KAZD,CAYE,OAAOe,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAaF,KAAb;AACH;AAEJ,GApBD;AAqBH,CAtBM;;AAyBP,MAAMD,WAAW,GAAGd,KAAD,KAAY;AAC3BkB,EAAAA,IAAI,EAAEpB,KAAK,CAACgB,WADe;AAE3BK,EAAAA,OAAO,EAAEnB;AAFkB,CAAZ,CAAnB;;AAIA,OAAO,MAAMoB,cAAc,GAAGpB,KAAD,KAAY;AACrCkB,EAAAA,IAAI,EAAEpB,KAAK,CAACsB,cADyB;AAErCD,EAAAA,OAAO,EAAEnB;AAF4B,CAAZ,CAAtB;AAIP,OAAO,MAAMqB,qBAAqB,GAAG,OAAO;AAACH,EAAAA,IAAI,EAAEpB,KAAK,CAACuB;AAAb,CAAP,CAA9B;AAEP,OAAO,MAAMC,YAAY,GAAGtB,KAAD,KAAY;AACnCkB,EAAAA,IAAI,EAAEpB,KAAK,CAACwB,YADuB;AAEnCH,EAAAA,OAAO,EAAEnB;AAF0B,CAAZ,CAApB;AAKP,OAAO,MAAMuB,YAAY,GAAG,OAAO;AAACL,EAAAA,IAAI,EAAEpB,KAAK,CAACyB;AAAb,CAAP,CAArB;AAEP,OAAO,MAAMC,iBAAiB,GAAG,MAAK;AAClC,SAAO,MAAOvB,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMK,IAAI,GAAE,MAAMT,aAAa,CAAE,QAAF,CAA/B;AACA,YAAMU,IAAI,GAAE,MAAMD,IAAI,CAACE,IAAL,EAAlB;AAEA,YAAMiB,MAAM,GAAElB,IAAI,CAACkB,MAAnB;AAEAxB,MAAAA,QAAQ,CAAEyB,WAAW,CAAED,MAAF,CAAb,CAAR;AAEH,KARD,CAQE,OAAOV,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAZD;AAaH,CAdM;;AAgBP,MAAMW,WAAW,GAAGD,MAAD,KAAa;AAC5BP,EAAAA,IAAI,EAAEpB,KAAK,CAAC4B,WADgB;AAE5BP,EAAAA,OAAO,EAAEM;AAFmB,CAAb,CAAnB","sourcesContent":["import { fetchConToken } from \"../../helpers/fetch\";\nimport { types } from \"../types/types\";\n\n\nexport const eventStartAddNew = (event) => {\n    return async (dispatch, getState) => {\n\n        const {uid, name} = getState().auth;\n\n        try {\n            const resp= await fetchConToken ('events', event, 'POST');\n            const body= await resp.json();\n\n            if ( body.ok) {\n                event.id = body.evento.id;\n                event.user = {\n                    _id: uid,\n                    name: name\n                }\n                dispatch(eventAddNew(event));\n            }\n        } catch (error) {\n            console.log (error);\n        }\n    \n    }\n}\n\n\nconst eventAddNew= (event) => ({\n    type: types.eventAddNew,\n    payload: event\n});\nexport const eventSetActive= (event) => ({\n    type: types.eventSetActive,\n    payload: event\n});\nexport const eventClearActiveEvent = () => ({type: types.eventClearActiveEvent});\n\nexport const eventUpdated= (event) => ({\n    type: types.eventUpdated,\n    payload: event\n});\n\nexport const eventDeleted = () => ({type: types.eventDeleted});\n\nexport const eventStartLoading = () =>{\n    return async (dispatch) => {\n        try {\n            const resp= await fetchConToken ('events');\n            const body= await resp.json();\n\n            const events= body.events;\n\n            dispatch (eventLoaded (events))\n            \n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nconst eventLoaded= (events) => ({\n    type: types.eventLoaded,\n    payload: events\n})"]},"metadata":{},"sourceType":"module"}