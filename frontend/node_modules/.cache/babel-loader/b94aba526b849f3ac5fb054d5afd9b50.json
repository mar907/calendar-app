{"ast":null,"code":"import Swal from \"sweetalert2\";\nimport { fetchConToken } from \"../../helpers/fetch\";\nimport { prepareEvents } from \"../../helpers/PrepareEvents\";\nimport { types } from \"../types/types\";\nexport const eventStartAddNew = event => {\n  return async (dispatch, getState) => {\n    const {\n      uid,\n      name\n    } = getState().auth;\n\n    try {\n      const resp = await fetchConToken('events', event, 'POST');\n      const body = await resp.json();\n\n      if (body.ok) {\n        event.id = body.evento.id;\n        event.user = {\n          _id: uid,\n          name: name\n        };\n        dispatch(eventAddNew(event));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventAddNew = event => ({\n  type: types.eventAddNew,\n  payload: event\n});\n\nexport const eventSetActive = event => ({\n  type: types.eventSetActive,\n  payload: event\n});\nexport const eventClearActiveEvent = () => ({\n  type: types.eventClearActiveEvent\n});\nexport const eventStartUpdate = event => {\n  return async dispatch => {\n    try {\n      const resp = await fetchConToken(`events/ ${event.id}`, event, 'PUT');\n      const body = await resp.json();\n\n      if (body.ok) {\n        dispatch(eventUpdated(event));\n      } else {\n        Swal.fire('Error', body.msg, 'error');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventUpdated = event => ({\n  type: types.eventUpdated,\n  payload: event\n});\n\nexport const eventStartDelete = () => {\n  return async (dispatch, getState) => {\n    const {\n      id\n    } = getState().calendar.activeEvent;\n\n    try {\n      const resp = await fetchConToken(`events/${id}`, {}, 'DELETE');\n      const body = await resp.json();\n\n      if (body.ok) {\n        dispatch(eventDeleted());\n      } else {\n        Swal.fire('Error', body.msg, 'error');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventDeleted = () => ({\n  type: types.eventDeleted\n});\n\nexport const eventStartLoading = () => {\n  return async dispatch => {\n    try {\n      const resp = await fetchConToken('events');\n      const body = await resp.json();\n      const events = prepareEvents(body.eventos);\n      dispatch(eventLoaded(events));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventLoaded = events => ({\n  type: types.eventLoaded,\n  payload: events\n});\n\nexport const eventLogout = () => ({\n  type: types.eventLogout\n});","map":{"version":3,"sources":["/Users/julianestefan/Documents/Vero/09-calendar-app/calendar-app/src/components/actions/events.js"],"names":["Swal","fetchConToken","prepareEvents","types","eventStartAddNew","event","dispatch","getState","uid","name","auth","resp","body","json","ok","id","evento","user","_id","eventAddNew","error","console","log","type","payload","eventSetActive","eventClearActiveEvent","eventStartUpdate","eventUpdated","fire","msg","eventStartDelete","calendar","activeEvent","eventDeleted","eventStartLoading","events","eventos","eventLoaded","eventLogout"],"mappings":"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","sourcesContent":["import Swal from \"sweetalert2\";\nimport { fetchConToken } from \"../../helpers/fetch\";\nimport { prepareEvents } from \"../../helpers/PrepareEvents\";\nimport { types } from \"../types/types\";\n\n\nexport const eventStartAddNew = (event) => {\n    return async (dispatch, getState) => {\n\n        const {uid, name} = getState().auth;\n\n        try {\n            const resp= await fetchConToken ('events', event, 'POST');\n            const body= await resp.json();\n\n            if ( body.ok) {\n                event.id = body.evento.id;\n                event.user = {\n                    _id: uid,\n                    name: name\n                }\n                dispatch(eventAddNew(event));\n            }\n        } catch (error) {\n            console.log (error);\n        }\n    \n    }\n}\n\n\nconst eventAddNew= (event) => ({\n    type: types.eventAddNew,\n    payload: event\n});\nexport const eventSetActive= (event) => ({\n    type: types.eventSetActive,\n    payload: event\n});\nexport const eventClearActiveEvent = () => ({type: types.eventClearActiveEvent});\n\nexport const eventStartUpdate = (event)=> {\n    return async(dispatch) => {\n        try {\n            const resp = await fetchConToken(`events/ ${event.id}`, event, 'PUT');\n            const body = await resp.json();\n\n            if (body.ok) {\n                dispatch (eventUpdated(event));\n            } else {\n                Swal.fire('Error', body.msg, 'error');\n            }\n\n        } catch (error) {\n            console.log (error);\n        }\n    }\n}\n\nconst eventUpdated= (event) => ({\n    type: types.eventUpdated,\n    payload: event\n});\n\nexport const eventStartDelete = () => {\n    return async (dispatch, getState) => {\n\n        const {id} = getState().calendar.activeEvent;\n        try {\n            const resp = await fetchConToken(`events/${id}`, {}, 'DELETE');\n            const body = await resp.json();\n\n            if (body.ok) {\n                dispatch (eventDeleted());\n            } else {\n                Swal.fire('Error', body.msg, 'error');\n            }\n\n        } catch (error) {\n            console.log (error);\n        }\n    }\n}\n\nconst eventDeleted = () => ({type: types.eventDeleted});\n\nexport const eventStartLoading = () =>{\n    return async (dispatch) => {\n        try {\n            const resp= await fetchConToken ('events');\n            const body= await resp.json();\n\n            const events= prepareEvents(body.eventos);\n\n            dispatch (eventLoaded (events))\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nconst eventLoaded= (events) => ({\n    type: types.eventLoaded,\n    payload: events\n})\n\nexport const eventLogout = () => ({type: types.eventLogout});"]},"metadata":{},"sourceType":"module"}